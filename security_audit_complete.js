import fs from 'fs';
import path from 'path';

// Complete security audit for client-side vulnerabilities
console.log('üîç AUDITORIA COMPLETA DE SEGURAN√áA - VULNERABILIDADES CLIENT-SIDE');
console.log('=' .repeat(70));

const vulnerabilities = {
  critical: [],
  high: [],
  medium: [],
  low: []
};

// Audit game-related endpoints
function auditGameSecurity() {
  console.log('\nüì± AUDITANDO SEGURAN√áA DO JOGO...');
  
  vulnerabilities.critical.push({
    endpoint: '/api/game/memory/result',
    issue: 'matchedPairs value trusted from client',
    details: 'Atacante pode enviar matchedPairs: 8 sem jogar',
    impact: 'Ganho de pr√™mios sem esfor√ßo',
    fix: 'Implementar valida√ß√£o server-side de cada jogada'
  });
  
  vulnerabilities.high.push({
    endpoint: '/api/game/create-session',
    issue: 'betAmount pode ser manipulado',
    details: 'Cliente controla valor da aposta enviada',
    impact: 'Poss√≠vel apostas com valores negativos ou inv√°lidos',
    fix: 'Valida√ß√£o rigorosa de range de valores'
  });
  
  vulnerabilities.high.push({
    endpoint: '/api/game/memory/result',
    issue: 'sessionId pode ser reutilizado',
    details: 'N√£o valida se sess√£o j√° foi usada',
    impact: 'M√∫ltiplos pr√™mios pela mesma sess√£o',
    fix: 'Marcar sess√µes como "used" ap√≥s resultado'
  });
  
  vulnerabilities.medium.push({
    endpoint: '/api/game/memory/result',
    issue: 'Tempo de jogo n√£o validado adequadamente',
    details: 'Apenas valida se < 30 segundos, mas aceita tempos irreais',
    impact: 'Jogos "instant√¢neos" suspeitos',
    fix: 'Validar tempo m√≠nimo e m√°ximo razo√°veis'
  });
}

// Audit payment security
function auditPaymentSecurity() {
  console.log('\nüí≥ AUDITANDO SEGURAN√áA DE PAGAMENTOS...');
  
  vulnerabilities.critical.push({
    endpoint: '/api/payments/pix/create',
    issue: 'amount value trusted from client',
    details: 'Valor de dep√≥sito controlado pelo cliente',
    impact: 'Dep√≥sitos com valores manipulados',
    fix: 'Validar amounts contra limites e policies'
  });
  
  vulnerabilities.critical.push({
    endpoint: '/api/payments/crypto/withdraw',
    issue: 'withdrawal amount from client',
    details: 'Valor de saque enviado pelo cliente',
    impact: 'Saques acima do saldo real',
    fix: 'Calcular withdrawal no servidor baseado em saldo real'
  });
  
  vulnerabilities.high.push({
    endpoint: '/api/payments/pix/withdraw',
    issue: 'pixKey validation insufficient',
    details: 'Valida√ß√£o b√°sica de chave PIX',
    impact: 'Chaves PIX inv√°lidas ou maliciosas',
    fix: 'Valida√ß√£o robusta de formato de chaves PIX'
  });
  
  vulnerabilities.medium.push({
    endpoint: '/api/payments/*',
    issue: 'Rate limiting por IP apenas',
    details: 'N√£o previne ataques distribu√≠dos',
    impact: 'Bypass de rate limiting',
    fix: 'Rate limiting por usu√°rio + IP + fingerprint'
  });
}

// Audit user management security
function auditUserSecurity() {
  console.log('\nüë§ AUDITANDO SEGURAN√áA DE USU√ÅRIOS...');
  
  vulnerabilities.high.push({
    endpoint: '/api/user/update',
    issue: 'User data updates from client',
    details: 'Dados pessoais atualizados via cliente',
    impact: 'Manipula√ß√£o de dados cr√≠ticos',
    fix: 'Validar campos permitidos para atualiza√ß√£o'
  });
  
  vulnerabilities.medium.push({
    endpoint: '/api/auth/register',
    issue: 'Email verification bypass potential',
    details: 'Registro sem verifica√ß√£o adequada',
    impact: 'Contas fake em massa',
    fix: 'Verifica√ß√£o obrigat√≥ria de email'
  });
  
  vulnerabilities.medium.push({
    endpoint: '/api/user/balance',
    issue: 'Balance calculation exposed',
    details: 'L√≥gica de c√°lculo de saldo pode vazar informa√ß√µes',
    impact: 'Informa√ß√µes sobre sistema de bonifica√ß√£o',
    fix: 'Minimizar informa√ß√µes expostas'
  });
}

// Audit transaction security
function auditTransactionSecurity() {
  console.log('\nüí∞ AUDITANDO SEGURAN√áA DE TRANSA√á√ïES...');
  
  vulnerabilities.critical.push({
    endpoint: '/api/user/transactions',
    issue: 'Transaction history manipulation risk',
    details: 'Hist√≥rico pode ser manipulado se n√£o houver valida√ß√£o',
    impact: 'Altera√ß√£o de registros financeiros',
    fix: 'Logs imut√°veis com hash verification'
  });
  
  vulnerabilities.high.push({
    endpoint: '/api/admin/*',
    issue: 'Admin endpoints authentication',
    details: 'Verifica√ß√£o de admin pode ser insuficiente',
    impact: 'Acesso n√£o autorizado a fun√ß√µes admin',
    fix: 'Multi-factor authentication para admin'
  });
  
  vulnerabilities.medium.push({
    endpoint: '/api/user/transactions',
    issue: 'Pagination manipulation',
    details: 'Par√¢metros de pagina√ß√£o controlados pelo cliente',
    impact: 'Sobrecarga do servidor, exposi√ß√£o de dados',
    fix: 'Limites rigorosos de pagina√ß√£o'
  });
}

// Audit session and authentication
function auditAuthSecurity() {
  console.log('\nüîê AUDITANDO SEGURAN√áA DE AUTENTICA√á√ÉO...');
  
  vulnerabilities.high.push({
    endpoint: '/api/auth/*',
    issue: 'Session fixation potential',
    details: 'Sessions podem n√£o ser regeneradas adequadamente',
    impact: 'Sequestro de sess√£o',
    fix: 'Regenerar session ID ap√≥s login'
  });
  
  vulnerabilities.medium.push({
    endpoint: '/api/auth/password-reset',
    issue: 'Token validation timing',
    details: 'Tokens podem n√£o expirar adequadamente',
    impact: 'Uso de tokens antigos',
    fix: 'Valida√ß√£o rigorosa de tempo de expira√ß√£o'
  });
  
  vulnerabilities.low.push({
    endpoint: 'All endpoints',
    issue: 'CORS configuration',
    details: 'Configura√ß√£o CORS pode ser muito permissiva',
    impact: 'Cross-origin attacks',
    fix: 'Restringir origins permitidas'
  });
}

// Check for input validation patterns
function auditInputValidation() {
  console.log('\nüîç AUDITANDO VALIDA√á√ÉO DE ENTRADAS...');
  
  try {
    const routesFile = fs.readFileSync('server/routes.ts', 'utf8');
    
    // Check for direct req.body usage without validation
    const directBodyUsage = routesFile.match(/req\.body\.\w+/g) || [];
    if (directBodyUsage.length > 0) {
      vulnerabilities.medium.push({
        endpoint: 'Multiple endpoints',
        issue: 'Direct req.body access without validation',
        details: `Found ${directBodyUsage.length} instances of direct body access`,
        impact: 'Poss√≠vel injection ou manipula√ß√£o de dados',
        fix: 'Usar schemas Zod para toda valida√ß√£o de entrada'
      });
    }
    
    // Check for parseInt/parseFloat without validation
    const unsafeParsing = routesFile.match(/parseInt\(|parseFloat\(/g) || [];
    if (unsafeParsing.length > 0) {
      vulnerabilities.medium.push({
        endpoint: 'Multiple endpoints',
        issue: 'Unsafe number parsing',
        details: `Found ${unsafeParsing.length} instances of unsafe parsing`,
        impact: 'NaN injection, type confusion',
        fix: 'Usar Zod number validation'
      });
    }
    
  } catch (error) {
    console.log('‚ö†Ô∏è Could not audit routes file');
  }
}

// Generate comprehensive security report
function generateSecurityReport() {
  console.log('\nüìä RELAT√ìRIO DE VULNERABILIDADES');
  console.log('=' .repeat(50));
  
  const total = vulnerabilities.critical.length + vulnerabilities.high.length + 
                vulnerabilities.medium.length + vulnerabilities.low.length;
  
  console.log(`\nüö® CR√çTICAS (${vulnerabilities.critical.length}):`);
  vulnerabilities.critical.forEach((vuln, i) => {
    console.log(`${i + 1}. ${vuln.endpoint}`);
    console.log(`   Issue: ${vuln.issue}`);
    console.log(`   Impact: ${vuln.impact}`);
    console.log(`   Fix: ${vuln.fix}\n`);
  });
  
  console.log(`‚ö†Ô∏è ALTAS (${vulnerabilities.high.length}):`);
  vulnerabilities.high.forEach((vuln, i) => {
    console.log(`${i + 1}. ${vuln.endpoint}`);
    console.log(`   Issue: ${vuln.issue}`);
    console.log(`   Fix: ${vuln.fix}\n`);
  });
  
  console.log(`üìã M√âDIAS (${vulnerabilities.medium.length}):`);
  vulnerabilities.medium.forEach((vuln, i) => {
    console.log(`${i + 1}. ${vuln.endpoint} - ${vuln.issue}`);
  });
  
  console.log(`\nüìà RESUMO EXECUTIVO:`);
  console.log(`‚Ä¢ Total de vulnerabilidades: ${total}`);
  console.log(`‚Ä¢ Cr√≠ticas que permitem ganho financeiro direto: ${vulnerabilities.critical.length}`);
  console.log(`‚Ä¢ Altas que comprometem seguran√ßa do sistema: ${vulnerabilities.high.length}`);
  console.log(`‚Ä¢ M√©dias que podem ser exploradas: ${vulnerabilities.medium.length}`);
  
  console.log(`\nüéØ PRIORIDADES DE CORRE√á√ÉO:`);
  console.log(`1. IMEDIATO (24h): Corrigir todas as vulnerabilidades cr√≠ticas`);
  console.log(`   - Valida√ß√£o server-side de jogadas`);
  console.log(`   - Valida√ß√£o de valores financeiros`);
  console.log(`   - Preven√ß√£o de reutiliza√ß√£o de sess√µes`);
  
  console.log(`\n2. URGENTE (1 semana): Corrigir vulnerabilidades altas`);
  console.log(`   - Fortalecer autentica√ß√£o admin`);
  console.log(`   - Melhorar valida√ß√£o de entradas`);
  console.log(`   - Implementar rate limiting avan√ßado`);
  
  console.log(`\n3. IMPORTANTE (1 m√™s): Corrigir vulnerabilidades m√©dias`);
  console.log(`   - Auditoria completa de input validation`);
  console.log(`   - Implementar logging de seguran√ßa`);
  console.log(`   - Testes de penetra√ß√£o`);
}

// Run complete security audit
async function runCompleteAudit() {
  console.log('\nüîç INICIANDO AUDITORIA COMPLETA...\n');
  
  auditGameSecurity();
  auditPaymentSecurity();
  auditUserSecurity();
  auditTransactionSecurity();
  auditAuthSecurity();
  auditInputValidation();
  
  generateSecurityReport();
  
  console.log('\nüõ°Ô∏è RECOMENDA√á√ïES IMEDIATAS:');
  console.log('1. Implementar valida√ß√£o server-side para TODAS as opera√ß√µes financeiras');
  console.log('2. Nunca confiar em dados enviados pelo cliente');
  console.log('3. Validar e sanitizar TODA entrada de usu√°rio');
  console.log('4. Implementar logging de seguran√ßa para detectar tentativas de explora√ß√£o');
  console.log('5. Adicionar testes automatizados de seguran√ßa');
  
  return vulnerabilities;
}

export { runCompleteAudit, vulnerabilities };

// Run audit if called directly
if (import.meta.url === `file://${process.argv[1]}`) {
  runCompleteAudit().catch(console.error);
}